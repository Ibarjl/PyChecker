#!/usr/bin/env python3
"""
Script de inicializaci√≥n para Health Monitor
Configura el entorno de desarrollo autom√°ticamente
"""
import os
import subprocess
import sys

def create_directories():
    """Crea directorios necesarios que no est√°n en git"""
    directories = ['logs', 'logs/backups']
    for directory in directories:
        os.makedirs(directory, exist_ok=True)
        print(f"üìÅ Directorio creado: {directory}")

def install_dependencies():
    """Instala dependencias de Python"""
    try:
        subprocess.check_call([sys.executable, '-m', 'pip', 'install', '-r', 'requirements.txt'])
        print("‚úÖ Dependencias instaladas correctamente")
    except subprocess.CalledProcessError:
        print("‚ùå Error instalando dependencias")
        return False
    return True

def validate_installation():
    """Valida que todo est√© instalado correctamente"""
    try:
        # Validar imports principales
        import yaml
        import flask
        import watchdog
        print("‚úÖ Todas las librer√≠as principales disponibles")
        # Validar configuraci√≥n
        from utils.validate_config import validate_config
        if validate_config():
            print("‚úÖ Configuraci√≥n YAML v√°lida")
        else:
            print("‚ö†Ô∏è  Problemas en configuraci√≥n YAML")
        return True
    except ImportError as e:
        print(f"‚ùå Error de importaci√≥n: {e}")
        return False

def main():
    print("üöÄ Configurando Health Monitor...")
    create_directories()
    if not install_dependencies():
        print("‚ùå Fall√≥ la instalaci√≥n de dependencias")
        return
    if validate_installation():
        print("\n‚úÖ ¬°Health Monitor configurado exitosamente!")
        print("\nPr√≥ximos pasos:")
        print("1. Ejecutar: python main.py")
        print("2. (Opcional) Frontend: cd frontend && python app.py")
    else:
        print("\n‚ö†Ô∏è  Configuraci√≥n completada con advertencias")

if __name__ == "__main__":
    main()
